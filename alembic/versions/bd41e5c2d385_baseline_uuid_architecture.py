"""baseline_uuid_architecture

Revision ID: bd41e5c2d385
Revises: 753624484d37
Create Date: 2025-10-26 21:52:45.009052

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bd41e5c2d385'
down_revision: Union[str, Sequence[str], None] = '753624484d37'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_catalog_asset_canonical'), table_name='catalog_asset')
    op.drop_index(op.f('ix_catalog_asset_source_ingest_asset_id'), table_name='catalog_asset')
    op.drop_index(op.f('ix_catalog_asset_tags'), table_name='catalog_asset')
    op.drop_table('catalog_asset')
    op.drop_table('alembic_version')
    op.add_column('assets', sa.Column('state', sa.String(length=20), nullable=False, comment='Asset lifecycle state: new, enriching, ready, retired'))
    op.add_column('assets', sa.Column('approved_for_broadcast', sa.Boolean(), nullable=False, comment="Asset approval status for broadcast. Must be true when state='ready'."))
    op.add_column('assets', sa.Column('collection_uuid', sa.UUID(), nullable=True))
    op.alter_column('assets', 'canonical',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               comment='Asset approval status for downstream schedulers and runtime. True = approved for playout without human review. False = exists in inventory but not yet approved; may be in review_queue.',
               existing_nullable=False)
    op.alter_column('assets', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('ix_assets_collection_id'), table_name='assets')
    op.drop_constraint(op.f('uq_assets_uuid'), 'assets', type_='unique')
    op.create_index('ix_assets_approved_for_broadcast', 'assets', ['approved_for_broadcast'], unique=False)
    op.create_index('ix_assets_collection_uuid', 'assets', ['collection_uuid'], unique=False)
    op.create_index('ix_assets_state', 'assets', ['state'], unique=False)
    op.drop_constraint(op.f('fk_assets_collection_id'), 'assets', type_='foreignkey')
    op.create_foreign_key(op.f('fk_assets_collection_uuid_source_collections'), 'assets', 'source_collections', ['collection_uuid'], ['id'], ondelete='SET NULL')
    op.drop_column('assets', 'collection_id')
    op.drop_column('assets', 'id')
    op.alter_column('broadcast_channels', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('broadcast_channels', 'timezone',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.drop_constraint(op.f('uq_broadcast_channel_name'), 'broadcast_channels', type_='unique')
    op.drop_constraint(op.f('uq_broadcast_channel_uuid'), 'broadcast_channels', type_='unique')
    op.create_unique_constraint(op.f('uq_broadcast_channels_name'), 'broadcast_channels', ['name'])
    op.drop_column('broadcast_channels', 'uuid')
    op.add_column('broadcast_playlog_event', sa.Column('asset_uuid', sa.UUID(), nullable=False))
    op.create_index('ix_broadcast_playlog_event_asset_uuid', 'broadcast_playlog_event', ['asset_uuid'], unique=False)
    op.drop_constraint(op.f('fk_broadcast_playlog_event_asset_id_catalog_asset'), 'broadcast_playlog_event', type_='foreignkey')
    op.create_foreign_key(op.f('fk_broadcast_playlog_event_asset_uuid_assets'), 'broadcast_playlog_event', 'assets', ['asset_uuid'], ['uuid'], ondelete='RESTRICT')
    op.drop_column('broadcast_playlog_event', 'asset_id')
    op.add_column('episode_assets', sa.Column('asset_uuid', sa.UUID(), nullable=False))
    op.drop_constraint(op.f('fk_episode_assets_asset_id_assets'), 'episode_assets', type_='foreignkey')
    op.create_foreign_key(op.f('fk_episode_assets_asset_uuid_assets'), 'episode_assets', 'assets', ['asset_uuid'], ['uuid'], ondelete='CASCADE')
    op.drop_column('episode_assets', 'asset_id')
    op.add_column('markers', sa.Column('asset_uuid', sa.UUID(), nullable=False))
    op.drop_index(op.f('ix_markers_asset_id'), table_name='markers')
    op.create_index('ix_markers_asset_uuid', 'markers', ['asset_uuid'], unique=False)
    op.drop_constraint(op.f('fk_markers_asset_id_assets'), 'markers', type_='foreignkey')
    op.create_foreign_key(op.f('fk_markers_asset_uuid_assets'), 'markers', 'assets', ['asset_uuid'], ['uuid'], ondelete='CASCADE')
    op.drop_column('markers', 'asset_id')
    op.add_column('provider_refs', sa.Column('asset_uuid', sa.UUID(), nullable=True))
    op.drop_constraint(op.f('fk_provider_refs_asset_id_assets'), 'provider_refs', type_='foreignkey')
    op.create_foreign_key(op.f('fk_provider_refs_asset_uuid_assets'), 'provider_refs', 'assets', ['asset_uuid'], ['uuid'], ondelete='CASCADE')
    op.drop_column('provider_refs', 'asset_id')
    op.add_column('review_queue', sa.Column('asset_uuid', sa.UUID(), nullable=False))
    op.alter_column('review_queue', 'status',
               existing_type=postgresql.ENUM('PENDING', 'RESOLVED', name='reviewstatus'),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('ix_review_queue_asset_id'), table_name='review_queue')
    op.create_index('ix_review_queue_asset_uuid', 'review_queue', ['asset_uuid'], unique=False)
    op.drop_constraint(op.f('fk_review_queue_asset_id_assets'), 'review_queue', type_='foreignkey')
    op.create_foreign_key(op.f('fk_review_queue_asset_uuid_assets'), 'review_queue', 'assets', ['asset_uuid'], ['uuid'], ondelete='CASCADE')
    op.drop_column('review_queue', 'asset_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('review_queue', sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_review_queue_asset_uuid_assets'), 'review_queue', type_='foreignkey')
    op.create_foreign_key(op.f('fk_review_queue_asset_id_assets'), 'review_queue', 'assets', ['asset_id'], ['id'], ondelete='CASCADE')
    op.drop_index('ix_review_queue_asset_uuid', table_name='review_queue')
    op.create_index(op.f('ix_review_queue_asset_id'), 'review_queue', ['asset_id'], unique=False)
    op.alter_column('review_queue', 'status',
               existing_type=postgresql.ENUM('PENDING', 'RESOLVED', name='reviewstatus'),
               server_default=sa.text("'PENDING'::reviewstatus"),
               existing_nullable=False)
    op.drop_column('review_queue', 'asset_uuid')
    op.add_column('provider_refs', sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_provider_refs_asset_uuid_assets'), 'provider_refs', type_='foreignkey')
    op.create_foreign_key(op.f('fk_provider_refs_asset_id_assets'), 'provider_refs', 'assets', ['asset_id'], ['id'], ondelete='CASCADE')
    op.drop_column('provider_refs', 'asset_uuid')
    op.add_column('markers', sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_markers_asset_uuid_assets'), 'markers', type_='foreignkey')
    op.create_foreign_key(op.f('fk_markers_asset_id_assets'), 'markers', 'assets', ['asset_id'], ['id'], ondelete='CASCADE')
    op.drop_index('ix_markers_asset_uuid', table_name='markers')
    op.create_index(op.f('ix_markers_asset_id'), 'markers', ['asset_id'], unique=False)
    op.drop_column('markers', 'asset_uuid')
    op.add_column('episode_assets', sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_episode_assets_asset_uuid_assets'), 'episode_assets', type_='foreignkey')
    op.create_foreign_key(op.f('fk_episode_assets_asset_id_assets'), 'episode_assets', 'assets', ['asset_id'], ['id'], ondelete='CASCADE')
    op.drop_column('episode_assets', 'asset_uuid')
    op.add_column('broadcast_playlog_event', sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_broadcast_playlog_event_asset_uuid_assets'), 'broadcast_playlog_event', type_='foreignkey')
    op.create_foreign_key(op.f('fk_broadcast_playlog_event_asset_id_catalog_asset'), 'broadcast_playlog_event', 'catalog_asset', ['asset_id'], ['id'], ondelete='RESTRICT')
    op.drop_index('ix_broadcast_playlog_event_asset_uuid', table_name='broadcast_playlog_event')
    op.drop_column('broadcast_playlog_event', 'asset_uuid')
    op.add_column('broadcast_channels', sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('uq_broadcast_channels_name'), 'broadcast_channels', type_='unique')
    op.create_unique_constraint(op.f('uq_broadcast_channel_uuid'), 'broadcast_channels', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_broadcast_channel_name'), 'broadcast_channels', ['name'], postgresql_nulls_not_distinct=False)
    op.alter_column('broadcast_channels', 'timezone',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('broadcast_channels', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('assets', sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('assets_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.add_column('assets', sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_assets_collection_uuid_source_collections'), 'assets', type_='foreignkey')
    op.create_foreign_key(op.f('fk_assets_collection_id'), 'assets', 'source_collections', ['collection_id'], ['id'], ondelete='SET NULL')
    op.drop_index('ix_assets_state', table_name='assets')
    op.drop_index('ix_assets_collection_uuid', table_name='assets')
    op.drop_index('ix_assets_approved_for_broadcast', table_name='assets')
    op.create_unique_constraint(op.f('uq_assets_uuid'), 'assets', ['uuid'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_assets_collection_id'), 'assets', ['collection_id'], unique=False)
    op.alter_column('assets', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('assets', 'canonical',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               comment=None,
               existing_comment='Asset approval status for downstream schedulers and runtime. True = approved for playout without human review. False = exists in inventory but not yet approved; may be in review_queue.',
               existing_nullable=False)
    op.drop_column('assets', 'collection_uuid')
    op.drop_column('assets', 'approved_for_broadcast')
    op.drop_column('assets', 'state')
    op.create_table('alembic_version',
    sa.Column('version_num', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('version_num', name=op.f('alembic_version_pkc'))
    )
    op.create_table('catalog_asset',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('canonical', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('source_ingest_asset_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['source_ingest_asset_id'], ['assets.id'], name=op.f('fk_catalog_asset_source_ingest_asset_id_assets'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_catalog_asset')),
    sa.UniqueConstraint('uuid', name=op.f('uq_catalog_asset_uuid'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_catalog_asset_tags'), 'catalog_asset', ['tags'], unique=False)
    op.create_index(op.f('ix_catalog_asset_source_ingest_asset_id'), 'catalog_asset', ['source_ingest_asset_id'], unique=False)
    op.create_index(op.f('ix_catalog_asset_canonical'), 'catalog_asset', ['canonical'], unique=False)
    # ### end Alembic commands ###
