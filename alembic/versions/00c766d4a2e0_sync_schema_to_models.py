"""sync schema to models

Revision ID: 00c766d4a2e0
Revises: b1c2d3e4f5a6
Create Date: 2025-10-30 16:26:06.148553

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '00c766d4a2e0'
down_revision: Union[str, Sequence[str], None] = 'b1c2d3e4f5a6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Intentionally keep legacy broadcast_* tables; this migration only updates assets and enrichers
    op.add_column('assets', sa.Column('canonical_key', sa.Text(), nullable=False))
    op.add_column('assets', sa.Column('canonical_key_hash', sa.String(length=64), nullable=False))
    op.add_column('assets', sa.Column('operator_verified', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Asset approval status for downstream schedulers and runtime. True = approved for playout without human review. False = exists in inventory but not yet approved; may be in review_queue.'))
    op.add_column('assets', sa.Column('last_enricher_checksum', sa.String(length=64), nullable=True))
    op.add_column('assets', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('assets', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('assets', 'collection_uuid',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('assets', 'approved_for_broadcast',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_comment="Asset approval status for broadcast. Must be true when state='ready'.",
               existing_nullable=False)
    op.alter_column('assets', 'discovered_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('assets', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.drop_index(op.f('ix_assets_approved_for_broadcast'), table_name='assets')
    op.drop_index(op.f('ix_assets_canonical'), table_name='assets')
    op.drop_constraint(op.f('uq_assets_uri'), 'assets', type_='unique')
    op.create_index('ix_assets_approved', 'assets', ['approved_for_broadcast'], unique=False)
    op.create_unique_constraint('ix_assets_collection_canonical_unique', 'assets', ['collection_uuid', 'canonical_key_hash'])
    op.create_unique_constraint('ix_assets_collection_uri_unique', 'assets', ['collection_uuid', 'uri'])
    op.create_index('ix_assets_operator_verified', 'assets', ['operator_verified'], unique=False)
    op.drop_column('assets', 'canonical')
    op.add_column('enrichers', sa.Column('protected_from_removal', sa.Boolean(), server_default=sa.text('false'), nullable=False))
    op.create_index('ix_enrichers_protected', 'enrichers', ['protected_from_removal'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_enrichers_protected', table_name='enrichers')
    op.drop_column('enrichers', 'protected_from_removal')
    op.add_column('assets', sa.Column('canonical', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Asset approval status for downstream schedulers and runtime. True = approved for playout without human review. False = exists in inventory but not yet approved; may be in review_queue.'))
    op.drop_index('ix_assets_operator_verified', table_name='assets')
    op.drop_constraint('ix_assets_collection_uri_unique', 'assets', type_='unique')
    op.drop_constraint('ix_assets_collection_canonical_unique', 'assets', type_='unique')
    op.drop_index('ix_assets_approved', table_name='assets')
    op.create_unique_constraint(op.f('uq_assets_uri'), 'assets', ['uri'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_assets_canonical'), 'assets', ['canonical'], unique=False)
    op.create_index(op.f('ix_assets_approved_for_broadcast'), 'assets', ['approved_for_broadcast'], unique=False)
    op.alter_column('assets', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('assets', 'discovered_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('assets', 'approved_for_broadcast',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_comment="Asset approval status for broadcast. Must be true when state='ready'.",
               existing_nullable=False)
    op.alter_column('assets', 'collection_uuid',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('assets', 'updated_at')
    op.drop_column('assets', 'created_at')
    op.drop_column('assets', 'last_enricher_checksum')
    op.drop_column('assets', 'operator_verified')
    op.drop_column('assets', 'canonical_key_hash')
    op.drop_column('assets', 'canonical_key')
    op.create_table('broadcast_schedule_day',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('channel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schedule_date', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['channel_id'], ['broadcast_channels.id'], name=op.f('fk_broadcast_schedule_day_channel_id_broadcast_channels'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['broadcast_template.id'], name=op.f('fk_broadcast_schedule_day_template_id_broadcast_template'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_broadcast_schedule_day')),
    sa.UniqueConstraint('channel_id', 'schedule_date', name=op.f('uq_broadcast_schedule_day_channel_date'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_broadcast_schedule_day_channel_id'), 'broadcast_schedule_day', ['channel_id'], unique=False)
    op.create_table('broadcast_template',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('broadcast_template_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pk_broadcast_template'),
    sa.UniqueConstraint('name', name='uq_broadcast_template_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('broadcast_template_block',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('end_time', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('rule_json', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['template_id'], ['broadcast_template.id'], name=op.f('fk_broadcast_template_block_template_id_broadcast_template'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_broadcast_template_block'))
    )
    op.create_index(op.f('ix_broadcast_template_block_template_id'), 'broadcast_template_block', ['template_id'], unique=False)
    op.create_table('broadcast_playlog_event',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('channel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('asset_uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('broadcast_day', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['asset_uuid'], ['assets.uuid'], name=op.f('fk_broadcast_playlog_event_asset_uuid_assets'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['channel_id'], ['broadcast_channels.id'], name=op.f('fk_broadcast_playlog_event_channel_id_broadcast_channels'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_broadcast_playlog_event')),
    sa.UniqueConstraint('uuid', name=op.f('uq_broadcast_playlog_event_uuid'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_broadcast_playlog_event_channel_start'), 'broadcast_playlog_event', ['channel_id', 'start_utc'], unique=False)
    op.create_index(op.f('ix_broadcast_playlog_event_channel_id'), 'broadcast_playlog_event', ['channel_id'], unique=False)
    op.create_index(op.f('ix_broadcast_playlog_event_broadcast_day'), 'broadcast_playlog_event', ['broadcast_day'], unique=False)
    op.create_index(op.f('ix_broadcast_playlog_event_asset_uuid'), 'broadcast_playlog_event', ['asset_uuid'], unique=False)
    # ### end Alembic commands ###
