name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: retrovue_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify working directory
        run: |
          pwd
          ls -la

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          ls -la *.txt
          pip install -r requirements.txt
          pip install pytest pytest-asyncio ruff mypy types-requests
          pip install -e .
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Run linting
        run: |
          echo "üîç Running ruff check with strict configuration..."
          ruff check .
          echo "‚úÖ Ruff check passed"
          echo "üîç Running mypy type checking..."
          mypy
          echo "‚úÖ MyPy check passed"

      # ENFORCED contracts only. Do NOT run draft/in-progress contracts here.

      - name: Enforce SourceAdd contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: SourceAdd contract tests must pass"
          pytest tests/contracts/test_source_add_contract.py tests/contracts/test_source_add_data_contract.py -v --tb=short
          echo "‚úÖ SourceAdd contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce SourceList contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: SourceList contract tests must pass"
          pytest tests/contracts/test_source_list_contract.py tests/contracts/test_source_list_data_contract.py -v --tb=short
          echo "‚úÖ SourceList contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce EnricherAdd contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: EnricherAdd contract tests must pass"
          pytest tests/contracts/test_enricher_add_contract.py tests/contracts/test_enricher_add_data_contract.py -v --tb=short
          echo "‚úÖ EnricherAdd contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce EnricherListTypes contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: EnricherListTypes contract tests must pass"
          pytest tests/contracts/test_enricher_list_types_contract.py tests/contracts/test_enricher_list_types_data_contract.py -v --tb=short
          echo "‚úÖ EnricherListTypes contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce EnricherList contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: EnricherList contract tests must pass"
          pytest tests/contracts/test_enricher_list_contract.py tests/contracts/test_enricher_list_data_contract.py -v --tb=short
          echo "‚úÖ EnricherList contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce EnricherUpdate contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: EnricherUpdate contract tests must pass"
          pytest tests/contracts/test_enricher_update_contract.py tests/contracts/test_enricher_update_data_contract.py -v --tb=short
          echo "‚úÖ EnricherUpdate contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce EnricherRemove contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: EnricherRemove contract tests must pass"
          pytest tests/contracts/test_enricher_remove_contract.py tests/contracts/test_enricher_remove_data_contract.py -v --tb=short
          echo "‚úÖ EnricherRemove contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce SourceListTypes contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: SourceListTypes contract tests must pass"
          pytest tests/contracts/test_source_list_types_contract.py tests/contracts/test_source_list_types_data_contract.py -v --tb=short
          echo "‚úÖ SourceListTypes contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Enforce SourceDiscover contract (ENFORCED)
        run: |
          echo "üîí ENFORCED: SourceDiscover contract tests must pass"
          pytest tests/contracts/test_source_discover_contract.py tests/contracts/test_source_discover_data_contract.py -v --tb=short
          echo "‚úÖ SourceDiscover contract enforcement passed"
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test

      - name: Cleanup test database
        run: |
          echo "üßπ Cleaning up test database..."
          python -c "
          import os
          import time
          from sqlalchemy import create_engine, text
          from sqlalchemy.exc import OperationalError

          # Use TEST_DATABASE_URL if available, otherwise use default
          db_url = os.getenv('TEST_DATABASE_URL', 'postgresql://postgres:postgres@localhost:5432/retrovue_test')

          # Create engine with longer timeout and retry logic
          engine = create_engine(
              db_url,
              pool_pre_ping=True,
              pool_timeout=60,  # Increased timeout
              connect_args={'connect_timeout': 30}  # Connection timeout
          )

          # Retry connection with exponential backoff
          max_retries = 3
          for attempt in range(max_retries):
              try:
                  with engine.connect() as conn:
                      # Check if database is accessible
                      result = conn.execute(text('SELECT 1'))
                      print(f'‚úÖ Database connection successful (attempt {attempt + 1})')
                      
                      # Clean up test data
                      tables_to_clean = [
                          'broadcast_playlog_event',
                          'broadcast_schedule_day', 
                          'broadcast_template_block',
                          'broadcast_template',
                          'catalog_asset',
                          'broadcast_channel',
                          'path_mappings',
                          'source_collections',
                          'sources',
                          'provider_refs',
                          'review_queue',
                          'markers',
                          'episode_assets',
                          'assets',
                          'episodes',
                          'seasons',
                          'titles'
                      ]
                      
                      for table in tables_to_clean:
                          try:
                              conn.execute(text(f'DELETE FROM {table}'))
                              print(f'  Cleaned table: {table}')
                          except Exception as e:
                              print(f'  Warning: Could not clean table {table}: {e}')
                      
                      conn.commit()
                      print('‚úÖ Test database cleaned up successfully')
                      break
                      
              except OperationalError as e:
                  print(f'‚ùå Database connection failed (attempt {attempt + 1}/{max_retries}): {e}')
                  if attempt < max_retries - 1:
                      wait_time = 2 ** attempt  # Exponential backoff
                      print(f'‚è≥ Waiting {wait_time} seconds before retry...')
                      time.sleep(wait_time)
                  else:
                      print('‚ùå All connection attempts failed, skipping cleanup')
                      exit(0)  # Don't fail the workflow for cleanup issues
              except Exception as e:
                  print(f'‚ùå Unexpected error during cleanup: {e}')
                  exit(0)  # Don't fail the workflow for cleanup issues
          "
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/retrovue_test
